# Author: Carlos Perez
# Email: carlos_perez[at]darkoperator.com
# Description: Resource file for generating XML file with general exploit information
# Version: 0.1
#
# Example:
# msf > set XML_FILE /tmp/w.xml
# XML_FILE => /tmp/w.xml
# msf > resource /Users/carlos/exploit_info.rc
# [*] Processing /Users/carlos/exploit_info.rc for ERB directives.
# [*] resource (/Users/carlos/exploit_info.rc)> Ruby Code (1106 bytes)
# [*] Parsing exploit information for each exploit.
# [*] Saving exploit information in XML format to /tmp/w.xml
# [+] Information saved.

<ruby>
xml_file = framework.datastore['XML_FILE']
if xml_file.nil?
	print_error("XML_FILE option is not set!")
	print_error("set XML_FILE <xmlfile>")
	return
end 
exploits = []
ranks ={
	0    => "None",
	100  => "Low",
	200  => "Average",
	300  => "Normal",
	400  => "Good",
	500  => "Great",
	600  => "Excellent"
}
print_status("Parsing exploit information for each exploit.")
framework.exploits.each_module do |n,e|
	# instanciate exploit object
	x=e.new

	# variables
	exploit = {}
	refs = []
	targets = []

	# Parse the references for each exploit
	x.references.each do |r|
		
		# Format the reference as it is saved by Nessus
		refs << "#{r.ctx_id}-#{r.ctx_val}"
	end

	# Parse the targets for each exploit
	x.targets.each do |t|
		targets << t.name
	end

	exploit = {
		:module      => n,
		:description => x.description.gsub('\t',''),
		:date        => x.disclosure_date,
		:targets     => targets,
		:references  => refs,
		:rank => ranks[x.rank]
	}
	exploits << exploit
end
#print_line(exploits.to_xml(:root => 'exploits'))
xmltxt = exploits.to_xml(:root => 'exploits')
print_status("Saving exploit information in XML format to #{xml_file}")
output = ::File.open(xml_file, "w")
xmltxt.each_line do |d|
	output.puts(d)
end
output.close
print_good("Information saved.")
</ruby>